# -*- coding: utf-8 -*-
"""load_preprocess.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15QbTZKKcq1z3yZqMs0H4fcNWLlGN6rq5
"""

!pip install pandas
!pip install numpy
!pip install scikit-learn

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.utils import resample
from sklearn.impute import SimpleImputer

def preprocess_and_transform_balanced(X):
    columns_to_drop = ['TransactionID']
    data = X.copy()
    data.drop(columns_to_drop, axis=1, inplace=True, errors='ignore')

    legit = data[data.isFraud == 0]
    fraud = data[data.isFraud == 1]
    legit = resample(legit, replace=True, n_samples=int(2.33*len(fraud)))
    data = pd.concat([legit, fraud])

    numerical_columns = data.select_dtypes(include=['int64', 'float64']).columns
    categorical_columns = [
                'ProductCD', 'DeviceType', 'Merchant', 'DeviceInfo', 'Card_Network', 'Card_Tier',
                'Card_Type', 'Sender_email', 'Merchant_email', 'User_Region', 'Order_Region',
                'Receiver_Region', 'Device_Matching_M4', 'Phone_Numbers','Device_Mismatch_M6',
                'RegionMismatch_M8','TransactionConsistency_M9', 'TransactionVelocity_E10',
                'TimingAnomaly_E11','RegionAnomaly_E12']

    label_encoders = {}
    for column in categorical_columns:
        if column in data.columns:
            label_encoder = LabelEncoder()
            data[column] = label_encoder.fit_transform(data[column].astype(str))
            label_encoders[column] = label_encoder  # Save encoders if needed later

    imputer = SimpleImputer(strategy='mean')
    data[numerical_columns] = imputer.fit_transform(data[numerical_columns])

    return data,label_encoders

# Load dataset
transaction_data = pd.read_csv("/content/synthetic_dataset.csv")
print("Dataset Loaded:", transaction_data.shape)

transaction_data ,label_encoders= preprocess_and_transform_balanced(transaction_data)
transaction_data['TransactionDT'] = pd.to_numeric(transaction_data['TransactionDT'], errors='coerce')
print("Preprocessing Completed:", transaction_data.shape)

